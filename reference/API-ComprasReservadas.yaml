openapi: 3.1.0
x-stoplight:
  id: pnjcr8huv28pj
info:
  title: API-ComprasReservadas
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      x-stoplight:
        id: v39evqew29tti
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
      x-stoplight:
        id: gomwvd5fikczw
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      x-stoplight:
        id: 4pkc1dpsudg3m
  /comprasreservadas:
    get:
      summary: ComprasReservadasSearch
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        PedidoCompraLineaID:
                          type: integer
                        Serie:
                          type: string
                        Numero:
                          type: integer
                        FechaPedido:
                          type: string
                        FechaRecepcionPrevistaLinea:
                          type: string
                        proveedorCodigo:
                          type: string
                        mailingNombre:
                          type: string
                        articuloCodigo:
                          type: string
                        NombreLinea:
                          type: string
                        SumaOf:
                          type: integer
                        SumaAlb:
                          type: integer
                        PrecioCompra:
                          type: integer
                        Dto1:
                          type: integer
                        Dto2:
                          type: integer
                        Dto3:
                          type: integer
                        ImporteFactor:
                          type: integer
                        CodigoProyectoOF:
                          type: integer
                        TipoProyecto:
                          type: string
                        FechaEntregaProveedor:
                          type: string
                        CantidadRecibida:
                          type: integer
                        Cantidad:
                          type: integer
                        Recibido:
                          type: integer
                        Estado:
                          type: string
                x-examples:
                  Example 1:
                    statusCode: 200
                    message: Request processed successfully
                    content:
                      - PedidoCompraLineaID: 375
                        Serie: Sin
                        Numero: 248
                        FechaPedido: '20191120'
                        FechaRecepcionPrevistaLinea: '20191120'
                        proveedorCodigo: '40020004'
                        mailingNombre: SAL IZAR
                        articuloCodigo: '5410003395'
                        NombreLinea: CTO. BOTELLERO  75 BASICO
                        SumaOf: 2
                        SumaAlb: 2
                        PrecioCompra: 36
                        Dto1: 0
                        Dto2: 0
                        Dto3: 0
                        ImporteFactor: 72
                        CodigoProyectoOF: 162
                        TipoProyecto: Proyecto
                        FechaEntregaProveedor: '20191120'
                        CantidadRecibida: 4
                        Cantidad: 2
                        Recibido: 1
                        Estado: RC
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                x-examples:
                  Example 1:
                    statusCode: 200
                    message: Request processed successfully
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                x-examples:
                  Example 1:
                    statusCode: 200
                    message: Request processed successfully
        '422':
          description: Unprocessable Entity (WebDAV)
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                x-examples:
                  Example 1:
                    statusCode: 200
                    message: Request processed successfully
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  message:
                    type: string
                x-examples:
                  Example 1:
                    statusCode: 200
                    message: Request processed successfully
      operationId: get-comprasreservadas
      x-stoplight:
        id: wn2n6ejuaqf9f
      parameters:
        - schema:
            type: string
          in: header
          name: accessToken
          description: login token
        - schema:
            type: array
          in: query
          name: ProyectoOFID
          required: true
          description: 'list ( , )'
        - schema:
            type: string
          in: query
          name: ProcesoID
        - schema:
            type: string
          in: query
          name: ProyectoandOF
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          x-stoplight:
            id: 3x4oif931hy60
        firstName:
          type: string
          x-stoplight:
            id: zvpc0tf4el3za
        lastName:
          type: string
          x-stoplight:
            id: 3gbi0ifnbkxr6
        email:
          type: string
          format: email
          x-stoplight:
            id: ryf28epyf1xcz
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
          x-stoplight:
            id: e2s769dux3evx
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
          x-stoplight:
            id: 2qqjjaul8tpp3
        createDate:
          type: string
          format: date
          description: The date that the user was created.
          x-stoplight:
            id: 5sx408cot0d06
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
      x-stoplight:
        id: 3e0qlcp2x7fzi
